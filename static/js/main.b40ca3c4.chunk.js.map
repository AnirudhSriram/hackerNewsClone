{"version":3,"sources":["context.js","search.js","header.js","topic.js","topics.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","Search","Consumer","context","Fragment","className","value","state","searchQuery","placeholder","onChange","event","setSearchQuery","target","Component","Header","props","Topic","details","score","href","url","rel","title","authorProfile","by","time","descendants","Topics","topics","random","prevProps","prevState","this","setState","contextType","ids","axios","get","then","result","data","splice","length","forEach","item","temp","push","setTopics","catch","err","finally","render","key","id","MyProvider","allTopics","filterTopics","filterdTopics","tempstr","toLowerCase","includes","Provider","children","App","to","path","Home","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b40ca3c4.chunk.js","sourcesContent":["import React from 'react';\r\nconst MyContext = React.createContext();\r\nexport  default MyContext;","import React ,{useState,useEffect} from 'react';\r\nimport MyContext from './context';\r\n// const Search = () => {\r\n//     const [query,search] = useState('');\r\n//     const filter = (event)=> {\r\n//         search(event.target.value)\r\n//     }\r\n//     useEffect(()=> {\r\n//         console.log(query);\r\n//     })\r\n    \r\n//     return   <input className=\"searchBar\" value={query} placeholder=\"search\" onChange={(event)=>filter(event)}/>\r\n// }\r\n\r\nclass Search extends React.Component{\r\n    render(){\r\n        \r\n        return (\r\n            <div>\r\n                <MyContext.Consumer>\r\n                    {(context)=> (\r\n                        <React.Fragment>\r\n                            <input className=\"searchBar\" value={context.state.searchQuery} placeholder=\"search\" onChange={(event) => context.setSearchQuery(event.target.value)}/>\r\n                        </React.Fragment>\r\n                    )}\r\n                </MyContext.Consumer>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Search;","import React from 'react';\r\nimport './header.css';\r\nimport Search from './search';\r\n\r\nconst Header = (props)=> {\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n        <div>\r\n                <h1 className=\"title\">Hacker News</h1>\r\n        </div>\r\n            <div>\r\n              <Search />\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\nimport './topic.css'\r\nconst Topic = (props) => {\r\n    return (\r\n        <div className={props.details.score > 200 ?'liPopular':'li' } >\r\n            <h3><a href={props.details.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.details.title}</a> <span className='url'>({props.details.url})</span></h3>\r\n            <span>{props.details.score} points |</span>\r\n            <span><a href={props.details.authorProfile} target=\"_blank\" rel=\"noopener noreferrer\" >{props.details.by}</a>|</span>\r\n            <span>{props.details.time}|</span>\r\n            <span>{props.details.descendants} comments</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Topic;","import React from 'react';\r\nimport axios from 'axios';\r\nimport './topics.css';\r\nimport Topic from './topic';\r\nimport MyContext from './context';\r\nclass Topics extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            topics: [],\r\n            random: true\r\n        }\r\n    }\r\n    componentDidUpdate(prevProps, prevState) {\r\n        if (this.context.state.topics != prevState.topics) {\r\n            this.setState({\r\n                topics: this.context.state.topics\r\n            })\r\n        }\r\n\r\n    }\r\n    componentWillMount() {\r\n\r\n        Topics.contextType = MyContext;\r\n        let ids = []\r\n\r\n        axios\r\n            .get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\r\n            .then(result => {\r\n                ids = result.data;\r\n                ids.splice(10, ids.length - 1);\r\n            })\r\n            .then(() => {\r\n                ids.forEach((item) => {\r\n                    axios.get(`https://hacker-news.firebaseio.com/v0/item/${item}.json?print=pretty`)\r\n                        .then(result => {\r\n                            let temp = this.context.state.topics;\r\n                            temp.push(result.data)\r\n                            this.setState({\r\n                                topics: temp\r\n                            })\r\n\r\n                            this.context.setTopics(temp)\r\n\r\n                            //  this.context.setTopics(temp)\r\n                            // this.context.setTopics(temp)\r\n                        })\r\n                })\r\n            })\r\n            .catch(err => {\r\n                this.setState({\r\n                    err: err\r\n                })\r\n            }).finally(() => {\r\n                this.setState({\r\n                    random: !this.state.random\r\n                })\r\n            });\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    render() {\r\n\r\n        var render = []\r\n        this.state.topics.forEach(item => {\r\n            render.push(<li key={item.id}><Topic details={item} /></li>)\r\n        });\r\n        return (<div>\r\n            <h1 className=\"title\">Topics</h1>\r\n            <ul className=\"ul\">\r\n                {render}\r\n            </ul>\r\n        </div>)\r\n    }\r\n\r\n}\r\n\r\nexport default Topics;","import React, { useEffect } from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Header from './header';\r\nimport Topics from './topics';\r\nimport MyContext from './context';\r\n\r\nclass MyProvider extends React.Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      topics : [],\r\n      searchQuery : '',\r\n      allTopics : []\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const setSearchQuery = (data)=> {\r\n      if(data !=''){\r\n        this.setState({\r\n          searchQuery : data,\r\n          topics : filterTopics(data)\r\n        })\r\n      }else {\r\n        this.setState({\r\n          searchQuery : '',\r\n          topics : this.state.allTopics\r\n        })\r\n      }\r\n\r\n    }\r\n\r\n    const filterTopics = (data) => {\r\n      let filterdTopics = []\r\n      let topics = this.state.topics;\r\n\r\n      topics.forEach((item)=> {\r\n        let tempstr = item.title;\r\n        tempstr = tempstr.toLowerCase();\r\n        if(tempstr.includes(data.toLowerCase())){\r\n            filterdTopics.push(item);\r\n            this.setState({\r\n              topics : filterdTopics\r\n            })\r\n        }\r\n      })\r\n        return filterdTopics;\r\n      \r\n    }\r\n\r\n    const setTopics = (data)=> {\r\n      this.setState({\r\n        allTopics : data,\r\n        topics: data\r\n      })\r\n     \r\n    }\r\n    return (\r\n      <MyContext.Provider value={{\r\n        state : this.state,\r\n        setSearchQuery : setSearchQuery,\r\n        setTopics : setTopics\r\n      }}>\r\n        {this.props.children}\r\n      </MyContext.Provider>\r\n    )\r\n\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  render() {\r\n    return (\r\n\r\n      <div className=\"App\">\r\n        <Router>\r\n          <div>\r\n            <nav>\r\n              <Link to=\"/topics\">Topics</Link>\r\n            </nav>\r\n          </div>\r\n          <Switch>\r\n            <Route path=\"/topics\">\r\n              <Topics />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Home />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default App;\r\n\r\nfunction Home() {\r\n\r\n  return <MyProvider>\r\n    <div>\r\n      <Header />\r\n      <Topics />\r\n    </div>;\r\n  </MyProvider>\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}