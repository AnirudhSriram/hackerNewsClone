{"version":3,"sources":["header.js","topic.js","topics.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","placeholder","Topic","props","href","details","url","target","rel","title","score","authorProfile","by","time","descendants","Topics","state","topics","ids","axios","get","then","result","data","splice","length","console","log","forEach","item","temp","push","setState","catch","err","finally","render","this","key","id","React","Component","App","useEffect","document","to","path","Home","Boolean","window","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4SAkBeA,G,YAhBA,WAEX,OACI,4BAAQC,UAAU,cAClB,6BACQ,wBAAIA,UAAU,SAAd,gBAEJ,6BACI,2BAAOA,UAAU,YAAYC,YAAY,e,yDCK1CC,G,MAbD,SAACC,GACX,OACI,6BACI,4BAAI,uBAAGC,KAAMD,EAAME,QAAQC,IAAKC,OAAO,SAASC,IAAI,uBAAuBL,EAAME,QAAQI,OAAzF,IAAoG,0BAAMT,UAAU,OAAhB,IAAwBG,EAAME,QAAQC,IAAtC,MACpG,8BAAOH,EAAME,QAAQK,MAArB,aACA,8BAAM,uBAAGN,KAAMD,EAAME,QAAQM,cAAeJ,OAAO,SAASC,IAAI,uBAAwBL,EAAME,QAAQO,IAAtG,KACA,8BAAOT,EAAME,QAAQQ,KAArB,KACA,8BAAOV,EAAME,QAAQS,YAArB,gBCsDGC,E,YAzDX,WAAYZ,GAAO,IAAD,8BACV,4CAAMA,KACDa,MAAQ,CACTC,OAAS,IAHH,E,iFAOE,IAAD,OACXC,EAAM,GACVC,IACKC,IAAI,yDACJC,MAAK,SAAAC,IACFJ,EAAMI,EAAOC,MACTC,OAAO,GAAGN,EAAIO,OAAO,GACzBC,QAAQC,IAAIT,MAEfG,MAAK,WACFH,EAAIU,SAAQ,SAACC,GACTV,IAAMC,IAAN,qDAAwDS,EAAxD,uBACCR,MAAK,SAAAC,GACF,IAAMQ,EAAO,EAAKd,MAAMC,OACxBa,EAAKC,KAAKT,EAAOC,MACjBG,QAAQC,IAAIG,GACZ,EAAKE,SAAS,CACVf,OAAOa,IAEXJ,QAAQC,IAAI,EAAKX,MAAMC,iBAIlCgB,OAAM,SAAAC,GACHA,EAAMA,KACPC,SAAQ,iB,+BAWf,IAAIC,EAAS,GAIb,OAHAC,KAAKrB,MAAMC,OAAOW,SAAQ,SAAAC,GACtBO,EAAOL,KAAK,wBAAIO,IAAKT,EAAKU,IAAI,kBAAC,EAAD,CAAOlC,QAASwB,SAE1C,6BACJ,wBAAI7B,UAAU,SAAd,UACA,wBAAIA,UAAU,MACVoC,Q,GAnDKI,IAAMC,WCiCZC,MA5Bf,WAKE,OAJAC,qBAAU,WAERC,SAASnC,MAAT,iBAGA,yBAAKT,UAAU,OACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,KACE,6BACE,6BACE,kBAAC,IAAD,CAAM6C,GAAG,WAAT,YAGJ,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,WACV,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,KACV,kBAACC,EAAD,WASZ,SAASA,IACP,OAAO,6BAEL,kBAAC,EAAD,OC9BgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASjB,OAAO,kBAAC,EAAD,MAASQ,SAASU,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.5074e760.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\nconst Header = ()=> {\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n        <div>\r\n                <h1 className=\"title\">Hacker News</h1>\r\n        </div>\r\n            <div>\r\n                <input className=\"searchBar\" placeholder=\"search\"/>\r\n            </div>\r\n            \r\n        </header>\r\n    )\r\n\r\n}\r\n\r\nexport default Header;","import React from 'react';\r\n\r\nconst Topic = (props) => {\r\n    return (\r\n        <div >\r\n            <h3><a href={props.details.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.details.title}</a> <span className='url'>({props.details.url})</span></h3>\r\n            <span>{props.details.score} points |</span>\r\n            <span><a href={props.details.authorProfile} target=\"_blank\" rel=\"noopener noreferrer\" >{props.details.by}</a>|</span>\r\n            <span>{props.details.time}|</span>\r\n            <span>{props.details.descendants} comments</span>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Topic;","import React  from 'react';\r\nimport axios from 'axios';\r\nimport './topics.css';\r\nimport Topic from './topic';\r\nimport { render } from 'react-dom';\r\nclass Topics extends React.Component {\r\n    constructor(props){\r\n            super(props);\r\n            this.state = {\r\n                topics : []\r\n            }\r\n    }\r\n\r\n    componentDidMount(){\r\n        let ids = []\r\n        axios\r\n            .get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\r\n            .then(result => {\r\n                ids = result.data;\r\n                ids.splice(10,ids.length-1);\r\n                console.log(ids);\r\n            })\r\n            .then(()=>{\r\n                ids.forEach((item)=> {\r\n                    axios.get(`https://hacker-news.firebaseio.com/v0/item/${item}.json?print=pretty`)\r\n                    .then(result => {\r\n                        const temp = this.state.topics;\r\n                        temp.push(result.data);\r\n                        console.log(temp)\r\n                        this.setState({\r\n                            topics:temp\r\n                        })\r\n                        console.log(this.state.topics)\r\n                    })\r\n                })\r\n            })\r\n            .catch(err => {\r\n                err = err;\r\n            }).finally(()=>{\r\n                \r\n            });\r\n    }\r\n    \r\n    // useEffect(()=> {\r\n    //     \r\n            \r\n    // },[])\r\n\r\n    render(){\r\n        var render = []\r\n        this.state.topics.forEach(item => {\r\n            render.push(<li key={item.id}><Topic details={item} /></li>)\r\n        });\r\n        return (<div>\r\n            <h1 className=\"title\">Topics</h1>\r\n            <ul className=\"ul\">\r\n               {render}\r\n            </ul>\r\n        </div>)\r\n    }\r\n    \r\n}\r\n\r\nexport default Topics;","import React,{useEffect} from 'react';\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Header from './header';\r\nimport Topics from './topics';\r\nfunction App() {\r\n  useEffect(() => {\r\n    // Update the document title using the browser API\r\n    document.title = `Hacker News`;\r\n  });\r\n  return (\r\n    <div className=\"App\">\r\n      <Header />\r\n      {/* <Topics /> */}\r\n      <Router>\r\n        <div>\r\n          <nav>\r\n            <Link to=\"/topics\">Topics</Link>\r\n          </nav>\r\n        </div>\r\n        <Switch>\r\n          <Route path=\"/topics\">\r\n            <Topics/>\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <Home />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\nfunction Home() {\r\n  return <div>\r\n    \r\n    <Topics />\r\n    </div>;\r\n}","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}