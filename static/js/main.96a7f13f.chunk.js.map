{"version":3,"sources":["context.js","search.js","header.js","topic.js","topics.js","App.js","serviceWorker.js","index.js"],"names":["MyContext","React","createContext","Search","Consumer","context","Fragment","className","value","state","searchQuery","placeholder","onChange","event","setSearchQuery","target","Component","Header","props","Topic","details","score","href","url","rel","title","authorProfile","by","time","descendants","Topics","topics","random","prevProps","prevState","Object","is","this","setState","contextType","ids","axios","get","then","result","data","splice","length","forEach","item","temp","push","setTopics","catch","err","finally","render","key","id","MyProvider","allTopics","filterTopics","filterdTopics","tempstr","toLowerCase","includes","Provider","children","App","path","Home","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96a7f13f.chunk.js","sourcesContent":["import React from 'react';\nconst MyContext = React.createContext();\nexport  default MyContext;","import React  from 'react';\nimport MyContext from './context';\n// const Search = () => {\n//     const [query,search] = useState('');\n//     const filter = (event)=> {\n//         search(event.target.value)\n//     }\n//     useEffect(()=> {\n//         console.log(query);\n//     })\n    \n//     return   <input className=\"searchBar\" value={query} placeholder=\"search\" onChange={(event)=>filter(event)}/>\n// }\n\nclass Search extends React.Component{\n    render(){\n        \n        return (\n            <div>\n                <MyContext.Consumer>\n                    {(context)=> (\n                        <React.Fragment>\n                            <input className=\"searchBar\" value={context.state.searchQuery} placeholder=\"search\" onChange={(event) => context.setSearchQuery(event.target.value)}/>\n                        </React.Fragment>\n                    )}\n                </MyContext.Consumer>\n            </div>\n        )\n    }\n}\n\nexport default Search;","import React from 'react';\nimport './header.css';\nimport Search from './search';\n\nconst Header = (props)=> {\n\n    return (\n        <header className=\"App-header\">\n        <div>\n                <h1 className=\"title\">Hacker News</h1>\n        </div>\n            <div>\n              <Search />\n            </div>\n            \n        </header>\n    )\n\n}\n\nexport default Header;","import React from 'react';\nimport './topic.css'\nconst Topic = (props) => {\n    return (\n        <div className={props.details.score > 200 ?'liPopular':'li' } >\n            <h3><a href={props.details.url} target=\"_blank\" rel=\"noopener noreferrer\">{props.details.title}</a> <span className='url'>({props.details.url})</span></h3>\n            <span>{props.details.score} points |</span>\n            <span><a href={props.details.authorProfile} target=\"_blank\" rel=\"noopener noreferrer\" >{props.details.by}</a>|</span>\n            <span>{props.details.time}|</span>\n            <span>{props.details.descendants} comments</span>\n        </div>\n\n    )\n}\n\nexport default Topic;","import React from 'react';\nimport axios from 'axios';\nimport './topics.css';\nimport Topic from './topic';\nimport MyContext from './context';\nclass Topics extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            topics: [],\n            random: true\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!Object.is(this.context.state.topics, prevState.topics)) {\n            this.setState({\n                topics: this.context.state.topics\n            })\n        }\n\n    }\n    componentWillMount() {\n\n        Topics.contextType = MyContext;\n        let ids = []\n\n        axios\n            .get(\"https://hacker-news.firebaseio.com/v0/topstories.json\")\n            .then(result => {\n                ids = result.data;\n                ids.splice(10, ids.length - 1);\n            })\n            .then(() => {\n                ids.forEach((item) => {\n                    axios.get(`https://hacker-news.firebaseio.com/v0/item/${item}.json?print=pretty`)\n                        .then(result => {\n                            let temp = this.context.state.topics;\n                            temp.push(result.data)\n                            this.setState({\n                                topics: temp\n                            })\n\n                            this.context.setTopics(temp)\n\n                            //  this.context.setTopics(temp)\n                            // this.context.setTopics(temp)\n                        })\n                })\n            })\n            .catch(err => {\n                this.setState({\n                    err: err\n                })\n            }).finally(() => {\n                this.setState({\n                    random: !this.state.random\n                })\n            });\n    }\n\n\n\n\n\n    render() {\n\n        var render = []\n        this.state.topics.forEach(item => {\n            render.push(<li key={item.id}><Topic details={item} /></li>)\n        });\n        return (<div>\n            <h1 className=\"title\">Topics</h1>\n            <ul className=\"ul\">\n                {render}\n            </ul>\n        </div>)\n    }\n\n}\n\nexport default Topics;","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link\n} from \"react-router-dom\";\nimport './App.css';\nimport Header from './header';\nimport Topics from './topics';\nimport MyContext from './context';\n\nclass MyProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      topics: [],\n      searchQuery: '',\n      allTopics: []\n    }\n  }\n\n  render() {\n    const setSearchQuery = (data) => {\n      if (data !== '') {\n        this.setState({\n          searchQuery: data,\n          topics: filterTopics(data)\n        })\n      } else {\n        this.setState({\n          searchQuery: '',\n          topics: this.state.allTopics\n        })\n      }\n\n    }\n\n    const filterTopics = (data) => {\n      let filterdTopics = []\n      let topics = this.state.topics;\n\n      topics.forEach((item) => {\n        let tempstr = item.title;\n        tempstr = tempstr.toLowerCase();\n        if (tempstr.includes(data.toLowerCase())) {\n          filterdTopics.push(item);\n          this.setState({\n            topics: filterdTopics\n          })\n        }\n      })\n      return filterdTopics;\n\n    }\n\n    const setTopics = (data) => {\n      this.setState({\n        allTopics: data,\n        topics: data\n      })\n\n    }\n    return (\n      <MyContext.Provider value={{\n        state: this.state,\n        setSearchQuery: setSearchQuery,\n        setTopics: setTopics\n      }}>\n        {this.props.children}\n      </MyContext.Provider>\n    )\n\n  }\n}\n\nclass App extends React.Component {\n  render() {\n    return (\n\n      <div className=\"App\">\n        <Router>\n          <Switch>\n            <Route path=\"/\">\n              <Home />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n\n    );\n  }\n\n}\n\nexport default App;\n\nfunction Home() {\n\n  return <MyProvider>\n    <div>\n      <Header />\n      <Topics />\n    </div>;\n  </MyProvider>\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}